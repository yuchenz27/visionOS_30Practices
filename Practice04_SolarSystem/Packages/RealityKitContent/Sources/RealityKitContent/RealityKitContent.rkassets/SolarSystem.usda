#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.60.6)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Mercury_Model", "Venus_Model", "Earth_Model", "Mars_Model", "Jupiter_Model", "Saturn_Model", "Uranus_Model", "Neptune_Model", "Cube", "Sun", "Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"]
    def Cube "Cube" (
        active = false
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["DefaultMaterial", "Orbit_Lines"]
        rel material:binding = </Root/Cube/Orbit_Lines> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (10, 0.001, 10)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "Orbit_Lines"
        {
            prepend token outputs:mtlx:surface.connect = </Root/Cube/Orbit_Lines/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (723.9685, 117.96835)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 99

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Cube/Orbit_Lines/IfGreaterOrEqual.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (446.80185, 114.90109)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 214
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:roughness"]
            }

            def Shader "Position"
            {
                uniform token info:id = "ND_position_vector3"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-1007.2925, 105.24957)
                float2 ui:nodegraph:node:size = (133, 40)
                int ui:nodegraph:node:stackingOrder = 133
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Separate3"
            {
                uniform token info:id = "ND_separate3_vector3"
                float3 inputs:in.connect = </Root/Cube/Orbit_Lines/Position.outputs:out>
                float outputs:outx
                float outputs:outy
                float outputs:outz
                float2 ui:nodegraph:node:pos = (-857.35156, 110.54297)
                float2 ui:nodegraph:node:size = (117, 145)
                int ui:nodegraph:node:stackingOrder = 135
            }

            def Shader "Combine2"
            {
                uniform token info:id = "ND_combine2_vector2"
                float inputs:in1.connect = </Root/Cube/Orbit_Lines/Separate3.outputs:outx>
                float inputs:in2.connect = </Root/Cube/Orbit_Lines/Separate3.outputs:outz>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-692.08984, 147.99219)
                float2 ui:nodegraph:node:size = (146, 53)
                int ui:nodegraph:node:stackingOrder = 189
            }

            def Shader "Magnitude"
            {
                uniform token info:id = "ND_magnitude_vector2"
                float2 inputs:in.connect = </Root/Cube/Orbit_Lines/Combine2.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-484.73828, 148.17578)
                float2 ui:nodegraph:node:size = (152, 40)
                int ui:nodegraph:node:stackingOrder = 184
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Modulo"
            {
                uniform token info:id = "ND_modulo_float"
                float inputs:in1.connect = </Root/Cube/Orbit_Lines/Magnitude.outputs:out>
                float inputs:in2 = 0.01
                float outputs:out
                float2 ui:nodegraph:node:pos = (-182.76172, 104.99609)
                float2 ui:nodegraph:node:size = (64, 39)
                int ui:nodegraph:node:stackingOrder = 227
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2"]
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_color3"
                color3f inputs:in1 = (0.999996, 1, 1) (
                    colorSpace = "srgb_texture"
                )
                color3f inputs:in2 = (0, 0, 0) (
                    colorSpace = "lin_srgb"
                )
                float inputs:value1 = 0.001
                prepend float inputs:value2.connect = </Root/Cube/Orbit_Lines/Modulo.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (66.20703, 100.046875)
                float2 ui:nodegraph:node:size = (157, 163)
                int ui:nodegraph:node:stackingOrder = 229
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:value1", "inputs:value2", "outputs:out"]
            }

            def Shader "IfGreaterOrEqual_1"
            {
                uniform token info:id = "ND_ifgreatereq_float"
                float inputs:value1.connect = </Root/Cube/Orbit_Lines/Magnitude.outputs:out>
                float inputs:value2 = 0.02
                float2 ui:nodegraph:node:pos = (-341.85938, 359.33203)
                float2 ui:nodegraph:node:size = (170, 163)
                int ui:nodegraph:node:stackingOrder = 242
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @transparent.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-3.2614436, 340.0333)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 245
            }
        }
    }

    def Xform "Sun" (
        active = true
    )
    {
        def "Sun_Model" (
            active = true
            references = @Sun.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 1.4901161e-8, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.19999999)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (3.7252903e-8, 0, 4.8428774e-8)
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitCustomComponent "RealityKitContent_PlanetRotationComponent"
            {
                uniform token info:id = "RealityKitContent.PlanetRotationComponent"
                float speed = 30
            }
        }
    }

    def Xform "Mercury" (
        active = true
    )
    {
        float3 xformOp:translate = (0.2, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "Mercury_Model" (
            active = true
            references = @Mercury.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.25, 0.25, 0.25)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitCustomComponent "RealityKitContent_PlanetRotationComponent"
            {
                uniform token info:id = "RealityKitContent.PlanetRotationComponent"
                float speed = 20
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.19999999, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (2.2351742e-8, 0, 2.9802322e-8)
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PlanetRevolutionComponent"
        {
            uniform token info:id = "RealityKitContent.PlanetRevolutionComponent"
            float radius = 0.2
            float speed = 45
        }
    }

    def Xform "Venus" (
        active = true
    )
    {
        float3 xformOp:translate = (0.3, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "Venus_Model" (
            active = true
            references = @Venus.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.3, 0.3, 0.3)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitCustomComponent "RealityKitContent_PlanetRotationComponent"
            {
                uniform token info:id = "RealityKitContent.PlanetRotationComponent"
                float speed = 20
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (2.682209e-7, 0, 2.682209e-7)
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PlanetRevolutionComponent"
        {
            uniform token info:id = "RealityKitContent.PlanetRevolutionComponent"
            float speed = 35
        }
    }

    def Xform "Earth" (
        active = true
    )
    {
        float3 xformOp:translate = (0.4, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "Earth_Model" (
            active = true
            references = @Earth.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.3, 0.3, 0.3)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitCustomComponent "RealityKitContent_PlanetRotationComponent"
            {
                uniform token info:id = "RealityKitContent.PlanetRotationComponent"
                float speed = 20
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.20499998, 0.205, 0.20500001)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (0.00004060194, 0, 0.00011316314)
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PlanetRevolutionComponent"
        {
            uniform token info:id = "RealityKitContent.PlanetRevolutionComponent"
            float radius = 0.4
            float speed = 30
        }
    }

    def Xform "Mars" (
        active = true
    )
    {
        float3 xformOp:translate = (0.5, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "Mars_Model" (
            active = true
            references = @Mars.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.25, 0.25, 0.25)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitCustomComponent "RealityKitContent_PlanetRotationComponent"
            {
                uniform token info:id = "RealityKitContent.PlanetRotationComponent"
                float speed = 20
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.19999999, 0.19999999, 0.19999999)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (3.3527613e-8, -0.000718683, 2.2351742e-8)
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PlanetRevolutionComponent"
        {
            uniform token info:id = "RealityKitContent.PlanetRevolutionComponent"
            float radius = 0.5
            float speed = 24
        }
    }

    def Xform "Jupiter" (
        active = true
    )
    {
        float3 xformOp:translate = (0.6, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "Jupiter_Model" (
            active = true
            references = @Jupiter.usdz@
        )
        {
            quatf xformOp:orient = (0.99999994, 0, 0, 0)
            float3 xformOp:scale = (0.39999995, 0.39999995, 0.39999995)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitCustomComponent "RealityKitContent_PlanetRotationComponent"
            {
                uniform token info:id = "RealityKitContent.PlanetRotationComponent"
                float speed = 20
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.19999999, 0.2, 0.20000002)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (-0.0005309619, 0.000080280006, -3.7252903e-9)
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PlanetRevolutionComponent"
        {
            uniform token info:id = "RealityKitContent.PlanetRevolutionComponent"
            float radius = 0.6
            float speed = 13
        }
    }

    def Xform "Saturn" (
        active = true
    )
    {
        float3 xformOp:translate = (0.7, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "Saturn_Model" (
            active = true
            references = @Saturn.usdz@
        )
        {
            quatf xformOp:orient = (0.99999994, 0, 0, 0)
            float3 xformOp:scale = (0.39999995, 0.39999995, 0.39999995)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitCustomComponent "RealityKitContent_PlanetRotationComponent"
            {
                uniform token info:id = "RealityKitContent.PlanetRotationComponent"
                float speed = 20
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.46763724, 0.20021316, 0.46763742)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (-3.7252903e-8, 0, 3.7252903e-8)
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PlanetRevolutionComponent"
        {
            uniform token info:id = "RealityKitContent.PlanetRevolutionComponent"
            float radius = 0.7
            float speed = 10
        }
    }

    def Xform "Uranus" (
        active = true
    )
    {
        float3 xformOp:translate = (0.8, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "Uranus_Model" (
            active = true
            references = @Uranus.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.3, 0.3, 0.3)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitCustomComponent "RealityKitContent_PlanetRotationComponent"
            {
                uniform token info:id = "RealityKitContent.PlanetRotationComponent"
                float speed = 20
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.19999999, 0.2, 0.20000002)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (6.3329935e-8, 0, 7.0780516e-8)
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PlanetRevolutionComponent"
        {
            uniform token info:id = "RealityKitContent.PlanetRevolutionComponent"
            float radius = 0.8
            float speed = 6
        }
    }

    def Xform "Neptune" (
        active = true
    )
    {
        float3 xformOp:translate = (0.9, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "Neptune_Model" (
            active = true
            references = @Neptune.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.3, 0.3, 0.3)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitCustomComponent "RealityKitContent_PlanetRotationComponent"
            {
                uniform token info:id = "RealityKitContent.PlanetRotationComponent"
                float speed = 20
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (2.9802322e-8, 0, 2.9802322e-8)
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }
        }

        def RealityKitCustomComponent "RealityKitContent_PlanetRevolutionComponent"
        {
            uniform token info:id = "RealityKitContent.PlanetRevolutionComponent"
            float radius = 0.9
            float speed = 5
        }
    }
}

